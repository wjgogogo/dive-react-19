---
description: 
globs: 
alwaysApply: true
---
# AI 驱动任务管理规则

你能够自动拆解复杂需求为可执行的任务列表，并实时跟踪执行进度。

## 🎯 核心原则

### 1. 智能任务拆解
- **自然语言理解**：接受自然语言描述的需求，自动分析并拆解为具体可执行的任务
- **层次化分解**：支持多层级任务分解，从高级需求到具体实现步骤
- **依赖关系识别**：自动识别任务间的依赖关系，确保执行顺序合理

### 2. 实时进度跟踪
- **状态自动更新**：根据代码变更和工作进展自动更新任务状态
- **进度可视化**：通过 markdown checkbox 直观显示完成进度
- **实时同步**：所有更新立即反映到 `task.md` 文档中

### 3. AI 辅助执行
- **实现指导**：为每个任务提供详细的实现指导和最佳实践
- **代码建议**：根据任务需求生成代码片段和实现示例
- **问题解决**：遇到阻塞时提供解决方案建议

## 📋 任务结构规范

### 任务文档格式 (`task.md`)

```markdown
# 项目任务管理

> 📊 **项目进度**: !@进度条
>
> 🕒 **最后更新**: 2025-01-12 14:30:00
>
> 📈 **总体状态**: 进行中

## 📑 项目概览

### 需求描述
[项目的核心需求和目标描述]

### 技术栈
- 前端: [技术栈]
- 后端: [技术栈]
- 数据库: [技术栈]
- 其他: [相关技术]

---

## 🎯 任务分解

### P0 - 核心功能 (高优先级 - 立即执行)

#### 任务组 1: [功能模块名称]
- [ ] **T001** - [任务标题] `🔥 P0`
  - **描述**: [详细描述]
  - **验收标准**: [明确的验收标准]
  - **技术要点**: [关键技术点]
  - **预估工时**: [时间估计]
  - **依赖**: [前置任务ID]
  - **状态**: `📋 待开始` | `🔄 进行中` | `✅ 已完成` | `🚫 已阻塞`
  - **最后更新**: [时间戳]

  <details>
  <summary>📝 实现指导</summary>

  **步骤分解**:
  1. [具体步骤1]
  2. [具体步骤2]
  3. [具体步骤3]

  **代码示例**:
  ```javascript
  // 示例代码
  ```

  **注意事项**:
  - [重要提醒1]
  - [重要提醒2]

  </details>

### P1 - 重要功能 (高优先级 - 计划中)

#### 任务组 2: [功能模块名称]
- [ ] **T002** - [任务标题] `⚡ P1`
  - [按照相同格式填写]

### P2 - 一般功能 (中优先级 - 后续执行)

#### 任务组 3: [功能模块名称]
- [ ] **T003** - [任务标题] `📌 P2`
  - [按照相同格式填写]

### PX - 创新功能 (探索性 - 可选实现)

#### 任务组 4: [实验性功能]
- [ ] **T004** - [任务标题] `🚀 PX`
  - [按照相同格式填写]

---

## 📊 进度统计

### 整体进度
- **总任务数**: [数量]
- **已完成**: [数量] ([百分比]%)
- **进行中**: [数量] ([百分比]%)
- **待开始**: [数量] ([百分比]%)
- **已阻塞**: [数量] ([百分比]%)

### 按优先级统计
| 优先级 | 总数 | 完成 | 进行中 | 待开始 | 阻塞 | 完成率 |
| ------ | ---- | ---- | ------ | ------ | ---- | ------ |
| P0     | [N]  | [N]  | [N]    | [N]    | [N]  | [N]%   |
| P1     | [N]  | [N]  | [N]    | [N]    | [N]  | [N]%   |
| P2     | [N]  | [N]  | [N]    | [N]    | [N]  | [N]%   |
| PX     | [N]  | [N]  | [N]    | [N]    | [N]  | [N]%   |

### 里程碑
- [ ] **M1** - [里程碑1名称] - 预期: [日期]
- [ ] **M2** - [里程碑2名称] - 预期: [日期]
- [ ] **M3** - [里程碑3名称] - 预期: [日期]

---

## 🔄 工作流程

### 每日工作流
1. **开始工作前**: 查看 P0 任务，选择今日要完成的任务
2. **工作期间**: 实时更新任务状态，记录进展和问题
3. **结束工作后**: 总结当日完成情况，规划明日任务

### 任务状态流转
```
📋 待开始 → 🔄 进行中 → ✅ 已完成
     ↓              ↓
   🚫 已阻塞 → 🔄 进行中
```

### 更新频率
- **实时更新**: 任务状态变更时立即更新


## 📝 操作指南

### 初始化项目
1. 创建 `task.md` 文件
2. 填写项目基本信息
3. 输入需求描述
4. 运行 AI 任务分解
5. 审核和调整生成的任务

### 日常使用
1. **查看今日任务**: 筛选 P0 和部分 P1 任务
2. **开始工作**: 将任务状态改为 `🔄 进行中`
3. **记录进展**: 在任务详情中添加工作记录
4. **完成任务**: 将状态改为 `✅ 已完成`
5. **处理阻塞**: 记录阻塞原因，寻求 AI 建议


## 📚 最佳实践

### 任务拆解原则
1. **原子性**: 每个任务应该是不可再分的最小工作单元
2. **可测试**: 每个任务都有明确的验收标准
3. **时间可控**: 单个任务不超过 4 小时工作量
4. **依赖清晰**: 明确标注前置依赖关系

### 优先级设置
- **P0**: 阻塞性任务，影响核心功能
- **P1**: 重要任务，影响主要功能
- **P2**: 一般任务，完善产品功能
- **PX**: 探索性任务，创新和优化

### 状态管理
- 及时更新任务状态
- 详细记录阻塞原因
- 定期回顾和调整优先级

---

## ⚠️ 注意事项

### 文档维护
- 保持 task.md 文档的实时性和准确性
- 定期清理已完成的过期任务
- 备份重要的任务历史记录

### 安全考虑
- 敏感信息不要写入任务描述
- 使用环境变量管理 API 密钥
- 定期审查任务访问权限

### 性能优化
- 避免单个文档过大影响加载速度
- 考虑按时间或模块拆分任务文档
- 使用缓存机制提高查询效率
