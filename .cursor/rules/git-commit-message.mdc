---
description: 
globs: 
alwaysApply: true
---
# Git 提交消息规范

## 格式要求

【必须】使用以下格式：
```
<类型>: <简短描述>

[可选详细描述]
[可选关联问题]
```

## 类型标识

【必须】使用以下类型之一：
- `feat`: 新功能
- `fix`: 修复 bug
- `docs`: 文档修改
- `style`: 格式修改（不影响功能）
- `refactor`: 代码重构
- `perf`: 性能优化
- `test`: 测试相关
- `chore`: 构建/工具变动

## 描述规范

【必须】遵循：
- 使用中文，不超过 50 字符
- 动词开头，现在时（"添加"非"添加了"）
- 不以句号结尾

## 示例

```
feat: 添加用户认证功能

实现 JWT 认证系统，包括登录、注册和令牌刷新。

close #123
```

## 分支管理

【推荐】使用：
- `main`: 主分支
- `feat/<功能名>`: 新功能分支
- `fix/<问题描述>`: 修复分支

## 🔍 检查清单：提交前确认

在执行 `git commit` 之前，【必须】逐项确认以下内容：

- [ ] **[P0]** 提交消息格式：本次提交的 commit message 是否严格遵循了 `<类型>: <简短描述>` 格式？（包括类型选择、描述简洁性、时态、标点等）
- [ ] **[P0]** 代码质量：提交的代码是否无语法错误、无编译警告或错误？
- [ ] **[P0]** 类型定义 (TypeScript)：所有相关的 TypeScript 类型定义是否完整、准确且已通过类型检查？
- [ ] **[P0]** 代码规范符合性：代码是否遵循了项目约定的代码风格（如 ESLint, Prettier 配置）和命名规范？
- [ ] **[P0]** 功能完整性：本次提交是否完整实现了其宣称的功能或修复？是否存在未完成或遗漏的逻辑？
- [ ] **[P0]** 错误处理：相关的代码路径是否添加了必要的错误处理（参考 `error-handling.mdc`）？
- [ ] **[P0]** 测试覆盖：是否为新增或修改的功能编写了必要的单元测试/集成测试，并且所有测试是否通过？
- [ ] **[P0]** 本地工具检查：是否已在本地运行并通过了 ESLint, Prettier 等代码质量和格式化工具的检查？
- [ ] **[P0]** 提交内容相关性：本次提交是否只包含与当前 `<类型>: <简短描述>` 直接相关的代码变更，没有混杂不相关的修改？
- [ ] **[P0]** 详细描述与关联问题（可选）：如果提交涉及复杂更改，是否在消息体中提供了详细描述？如果关联了 issue，是否已正确标记？
