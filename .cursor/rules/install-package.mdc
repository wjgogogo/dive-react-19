---
description: npm 包安装规范
globs: 
alwaysApply: true
---
# npm 包安装规范

## 安装要求

【必须】遵循：
- 优先使用 pnpm，其次 yarn，再次 npm
- 锁定依赖版本，禁止使用 latest
- 全局依赖需说明理由

## 示例

```sh
# ✅ 正确
pnpm add react@18.2.0
npm install axios@1.6.0
```

## Monorepo Workspace 管理

### 工作区配置

【必须】在根目录配置工作区：

```json
// package.json
{
  "name": "my-monorepo",
  "workspaces": [
    "packages/*",
    "apps/*"
  ]
}

// pnpm-workspace.yaml (pnpm)
packages:
  - 'packages/*'
  - 'apps/*'
```

### 依赖安装策略

【必须】遵循：
- **根依赖**：开发工具、构建工具安装在根目录
- **共享依赖**：多个包使用的依赖安装在根目录
- **特定依赖**：只有单个包使用的依赖安装在对应包内

```sh
# ✅ 正确 - 根目录安装开发依赖
pnpm add -w -D typescript@5.0.0 eslint@8.0.0

# ✅ 正确 - 根目录安装共享依赖
pnpm add -w react@18.2.0 react-dom@18.2.0

# ✅ 正确 - 特定包安装依赖
pnpm add --filter @my-app/web axios@1.6.0
pnpm add --filter @my-lib/utils lodash@4.17.21

# ✅ 正确 - 为所有包安装相同依赖
pnpm add -r typescript@5.0.0
```

### 版本管理

【必须】保持版本一致：
- 使用 `pnpm list` 检查依赖版本
- 共享依赖在所有包中使用相同版本
- 使用 `syncpack` 工具同步版本

```sh
# ✅ 正确 - 检查依赖版本
pnpm list --depth=0
pnpm list --filter @my-app/web

# ✅ 正确 - 同步版本
npx syncpack list-mismatches
npx syncpack fix-mismatches
```

### 内部包引用

【必须】使用 workspace 协议：

```json
// packages/web/package.json
{
  "dependencies": {
    "@my-lib/utils": "workspace:*",
    "@my-lib/components": "workspace:^1.0.0"
  }
}
```

## 🔍 检查清单

在安装新的 npm 包或管理项目依赖时，【必须】或【推荐】遵循以下检查项：

### 包选择与安装基础
- [ ] **[P0]** 必要性评估：在安装新包之前，是否已评估其必要性，并考虑是否有现有依赖或原生 API 可替代？
- [ ] **[P0]** 包管理器：是否优先使用 `pnpm`（其次 `yarn`，再次 `npm`）进行包安装与管理？
- [ ] **[P0]** 版本锁定：安装包时，是否指定了明确的版本号（如 `package@1.8.0`），而非 `latest` 或范围版本（如 `^1.0.0`，除非有特定策略）？
- [ ] **[P0]** Context7 文档（针对外部库）：如果是引入新的外部第三方库，是否已按规范通过 Context7 MCP 获取其最新官方文档？
- [ ] **[P1]** 官方与可信来源：包是否从官方 npm registry 或项目信任的私有 registry 安装？
- [ ] **[P1]** 依赖审查：是否关注了新包的依赖项数量、是否存在已知漏洞（可使用 `npm audit` 或 `pnpm audit`）？

### Monorepo 项目依赖管理 (若适用)
- [ ] **[P0]** 工作区配置：项目的 `package.json` (及 `pnpm-workspace.yaml` 若使用 pnpm) 是否正确配置了 `workspaces`？
- [ ] **[P0]** 依赖安装位置：
    - 开发工具和构建工具（如 TypeScript, ESLint）是否安装在 Monorepo 根目录 (`pnpm add -w -D ...`)？
    - 多个子包共享的依赖是否安装在根目录 (`pnpm add -w ...`)？
    - 仅单个子包使用的依赖是否安装在对应包内 (`pnpm add --filter <package-name> ...`)？
- [ ] **[P0]** 内部包引用：子包之间相互依赖时，是否使用了 `workspace:` 协议 (如 `"@my-lib/utils": "workspace:*"`)？
- [ ] **[P1]** 版本一致性：Monorepo 中的共享依赖在所有子包中是否保持版本一致？（推荐使用 `syncpack` 等工具检查和修复）

### 其他注意事项
- [ ] **[P2]** 全局安装：如果需要全局安装某个包，是否有明确的、已记录的理由，并且团队已知晓？
- [ ] **[P2]** 定期审查：是否定期审查项目依赖，移除不再使用或有更好替代品的包？
